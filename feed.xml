<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://jeremyfix.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jeremyfix.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-11T10:12:41+00:00</updated><id>https://jeremyfix.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">One liners</title><link href="https://jeremyfix.github.io/blog/2025/oneliner/" rel="alternate" type="text/html" title="One liners"/><published>2025-01-08T20:57:00+00:00</published><updated>2025-01-08T20:57:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/oneliner</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/oneliner/"><![CDATA[<p>Today, I was running several simulations with <a href="https://github.com/torchcvnn/examples/tree/main/nir_cinejense">torchcvnn</a>, each of them saving their results a <code class="language-plaintext highlighter-rouge">metrics.csv</code> file within a specific directory. Each <code class="language-plaintext highlighter-rouge">metrics.csv</code> file was like :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>16,33.1491584777832,33.149155968594066,0.8940797582559719
</code></pre></div></div> <p>with an index followed by the metrics.</p> <p>The question was : how to easily compute the mean and standard deviation of the metrics by accumulating the measures from all the simulations.</p> <p>First, we can locate all the metrics file and build a list of these filenames</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s2">"metrics.csv"</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>  <span class="s2">" "</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">tr</code> command allows to remove the “new line”, in order to have a sequence of filepaths on a single line.</p> <p>And then, serialize a second command, this time using awk based. The computation of the standard deviation is the difference between the mean of the squared valued and the squared mean value.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>f <span class="k">in</span> <span class="si">$(</span>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s2">"metrics.csv"</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>  <span class="s2">" "</span><span class="si">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">cat</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="p">;</span> <span class="nb">printf</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s1">','</span> <span class="s1">'{s+=$3; ss+=$3^2} END{print m=s/NR, sqrt(ss/NR-m^2)}'</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="bash"/><category term="bash"/><category term="awk"/><category term="find"/><summary type="html"><![CDATA[One liner beauty for aggregating files and computing statistics]]></summary></entry><entry><title type="html">Python and Paraview for batch processing</title><link href="https://jeremyfix.github.io/blog/2025/scriptingParaview/" rel="alternate" type="text/html" title="Python and Paraview for batch processing"/><published>2025-01-08T20:57:00+00:00</published><updated>2025-01-08T20:57:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/scriptingParaview</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/scriptingParaview/"><![CDATA[<p>I just tested a super useful feature of <a href="https://github.com/Kitware/ParaView">Paraview</a>. In a nutshell, I have been using paraview in the context of the research project Woodseer, for 3d rendering Xrays and their annotations.</p> <p>Unfortunately, I had to generate illustrations from a batch of data and doing so from the GUI is not easy.</p> <p>Fortunaly, Paraview allows to record all the operations performed on the GUI and export all of these operations as a python script. The script is hardcoding the data filenames to be processed but it is only about changing few lines at the beginning of the script and you have a script able to batch process a collection of data.</p> <p>To record your interactions with Paraview, just clicking <code class="language-plaintext highlighter-rouge">Tools / Start trace</code>. Then you proceed with paraviex, adding your data, manipulating the 3d display, view point, colors, etc… Once done, just click on <code class="language-plaintext highlighter-rouge">Tools/Stop trace</code> and paraview will give you the equivalent python script for doing exactly the same operations. As a bonus, at the end of the script, we are provided sample codes for either displaying the output or even producing a screenshot.</p> <p>To run the script from your console, we need to use the <code class="language-plaintext highlighter-rouge">pvpython</code> interpreter which I believe contains its virtual environment for accessing the paraview python library.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pvpython paraplot_bil.py /opt/Datasets/Woodseer/Slicing/Sapin/4396
</code></pre></div></div> <p>And there you are :</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bil_4396-480.webp 480w,/assets/img/bil_4396-800.webp 800w,/assets/img/bil_4396-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bil_4396.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Example rendering using paraview python scripting" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The python script that has been produced by the paraview export is given below :</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># trace generated using paraview version 5.13.0
# import paraview
# paraview.compatibility.major = 5
# paraview.compatibility.minor = 13
</span>
<span class="c1">#### import the simple module from the paraview
</span><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">pathlib</span>
<span class="kn">from</span> <span class="n">paraview.simple</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#### disable automatic camera reset on 'Show'
</span><span class="n">paraview</span><span class="p">.</span><span class="n">simple</span><span class="p">.</span><span class="nf">_DisableFirstRenderCameraReset</span><span class="p">()</span>

<span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Usage: python paraplot_compare.py &lt;xraydirw&gt;</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">xray_dir</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">treenumber</span> <span class="o">=</span> <span class="n">pathlib</span><span class="p">.</span><span class="nc">Path</span><span class="p">(</span><span class="n">xray_dir</span><span class="p">).</span><span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># get active view
</span><span class="n">renderView1</span> <span class="o">=</span> <span class="nc">GetActiveViewOrCreate</span><span class="p">(</span><span class="sh">"</span><span class="s">RenderView</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Properties modified on renderView1
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">UseColorPaletteForBackground</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># get the material library
</span><span class="n">materialLibrary1</span> <span class="o">=</span> <span class="nc">GetMaterialLibrary</span><span class="p">()</span>

<span class="c1"># Properties modified on renderView1
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">Background</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>

<span class="c1"># Hide orientation axes
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">OrientationAxesVisibility</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># create a new 'NetCDF Reader'
</span><span class="n">xraync</span> <span class="o">=</span> <span class="nc">NetCDFReader</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">xray.nc</span><span class="sh">"</span><span class="p">,</span> <span class="n">FileName</span><span class="o">=</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">xray_dir</span><span class="si">}</span><span class="s">/xray.nc</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># show data in view
</span><span class="n">xrayncDisplay</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">xraync</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">UniformGridRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">xrayncDisplay</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Outline</span><span class="sh">"</span>

<span class="c1"># reset view to fit data
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">ResetCamera</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># hide data in view
</span><span class="nc">Hide</span><span class="p">(</span><span class="n">xraync</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># create a new 'Contour'
</span><span class="n">contour1</span> <span class="o">=</span> <span class="nc">Contour</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">Contour1</span><span class="sh">"</span><span class="p">,</span> <span class="n">Input</span><span class="o">=</span><span class="n">xraync</span><span class="p">)</span>


<span class="c1"># show data in view
</span><span class="n">contour1Display</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">contour1</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">GeometryRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">contour1Display</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Surface</span><span class="sh">"</span>

<span class="c1"># reset view to fit data
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">ResetCamera</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">)</span>
<span class="n">contour1</span><span class="p">.</span><span class="n">Isosurfaces</span> <span class="o">=</span> <span class="p">[</span><span class="mf">950.0</span><span class="p">]</span>

<span class="c1"># show color bar/color legend
</span><span class="n">contour1Display</span><span class="p">.</span><span class="nc">SetScalarBarVisibility</span><span class="p">(</span><span class="n">renderView1</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># get color transfer function/color map for 'data'
</span><span class="n">dataLUT</span> <span class="o">=</span> <span class="nc">GetColorTransferFunction</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># get opacity transfer function/opacity map for 'data'
</span><span class="n">dataPWF</span> <span class="o">=</span> <span class="nc">GetOpacityTransferFunction</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># get 2D transfer function for 'data'
</span><span class="n">dataTF2D</span> <span class="o">=</span> <span class="nc">GetTransferFunction2D</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># turn off scalar coloring
</span><span class="nc">ColorBy</span><span class="p">(</span><span class="n">contour1Display</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># Hide the scalar bar for this color map if no visible data is colored by it.
</span><span class="nc">HideScalarBarIfNotNeeded</span><span class="p">(</span><span class="n">dataLUT</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># create a new 'NetCDF Reader'
</span><span class="n">bilnc</span> <span class="o">=</span> <span class="nc">NetCDFReader</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">bil.nc</span><span class="sh">"</span><span class="p">,</span> <span class="n">FileName</span><span class="o">=</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">xray_dir</span><span class="si">}</span><span class="s">/bil.nc</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># show data in view
</span><span class="n">bilncDisplay</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">bilnc</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">UniformGridRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">bilncDisplay</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Outline</span><span class="sh">"</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># create a new 'Transform'
</span><span class="n">transform1</span> <span class="o">=</span> <span class="nc">Transform</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">Transform1</span><span class="sh">"</span><span class="p">,</span> <span class="n">Input</span><span class="o">=</span><span class="n">bilnc</span><span class="p">)</span>

<span class="c1"># Properties modified on transform1.Transform
</span><span class="n">transform1</span><span class="p">.</span><span class="n">Transform</span><span class="p">.</span><span class="n">Translate</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mf">400.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">]</span>

<span class="c1"># show data in view
</span><span class="n">transform1Display</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">transform1</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">StructuredGridRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">transform1Display</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Outline</span><span class="sh">"</span>

<span class="c1"># hide data in view
</span><span class="nc">Hide</span><span class="p">(</span><span class="n">bilnc</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># create a new 'Contour'
</span><span class="n">contour2</span> <span class="o">=</span> <span class="nc">Contour</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">Contour2</span><span class="sh">"</span><span class="p">,</span> <span class="n">Input</span><span class="o">=</span><span class="n">transform1</span><span class="p">)</span>

<span class="c1"># show data in view
</span><span class="n">contour2Display</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">contour2</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">GeometryRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">contour2Display</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Surface</span><span class="sh">"</span>

<span class="c1"># show color bar/color legend
</span><span class="n">contour2Display</span><span class="p">.</span><span class="nc">SetScalarBarVisibility</span><span class="p">(</span><span class="n">renderView1</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># hide data in view
</span><span class="nc">Hide</span><span class="p">(</span><span class="n">transform1</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># turn off scalar coloring
</span><span class="nc">ColorBy</span><span class="p">(</span><span class="n">contour2Display</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># Hide the scalar bar for this color map if no visible data is colored by it.
</span><span class="nc">HideScalarBarIfNotNeeded</span><span class="p">(</span><span class="n">dataLUT</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># ================================================================
# addendum: following script captures some of the application
# state to faithfully reproduce the visualization during playback
# ================================================================
</span>
<span class="c1"># get layout
</span><span class="n">layout1</span> <span class="o">=</span> <span class="nc">GetLayout</span><span class="p">()</span>

<span class="c1"># --------------------------------
# saving layout sizes for layouts
</span>
<span class="c1"># layout/tab size in pixels
</span><span class="n">layout1</span><span class="p">.</span><span class="nc">SetSize</span><span class="p">(</span><span class="mi">695</span><span class="p">,</span> <span class="mi">909</span><span class="p">)</span>

<span class="c1"># -----------------------------------
# saving camera placements for views
</span>
<span class="c1"># current camera placement for renderView1
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">CameraPosition</span> <span class="o">=</span> <span class="p">[</span><span class="mf">176.54338928363353</span><span class="p">,</span> <span class="o">-</span><span class="mf">2235.517103337426</span><span class="p">,</span> <span class="mf">854.599164978424</span><span class="p">]</span>
<span class="n">renderView1</span><span class="p">.</span><span class="n">CameraFocalPoint</span> <span class="o">=</span> <span class="p">[</span><span class="mf">38.13334555795167</span><span class="p">,</span> <span class="mf">112.86198528178713</span><span class="p">,</span> <span class="mf">548.253544940588</span><span class="p">]</span>
<span class="n">renderView1</span><span class="p">.</span><span class="n">CameraViewUp</span> <span class="o">=</span> <span class="p">[</span>
    <span class="o">-</span><span class="mf">0.017260080149817204</span><span class="p">,</span>
    <span class="mf">0.12833424422633485</span><span class="p">,</span>
    <span class="mf">0.991580763928021</span><span class="p">,</span>
<span class="p">]</span>
<span class="n">renderView1</span><span class="p">.</span><span class="n">CameraParallelScale</span> <span class="o">=</span> <span class="mf">753.4992643086075</span>


<span class="c1">##--------------------------------------------
## You may need to add some code at the end of this python script depending on your usage, eg:
#
## Render all views to see them appears
# RenderAllViews()
#
## Interact with the view, usefull when running from pvpython
# Interact()
#
## Save a screenshot of the active view
</span><span class="nc">SaveScreenshot</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">/tmp/comparison/</span><span class="si">{</span><span class="n">treenumber</span><span class="si">}</span><span class="s">.png</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># SaveScreenshot("path/to/screenshot.png")
#
## Save a screenshot of a layout (multiple splitted view)
# SaveScreenshot("path/to/screenshot.png", GetLayout())
#
## Save all "Extractors" from the pipeline browser
# SaveExtracts()
#
## Save a animation of the current active view
# SaveAnimation()
#
## Please refer to the documentation of paraview.simple
## https://www.paraview.org/paraview-docs/latest/python/paraview.simple.html
##--------------------------------------------
</span></code></pre></div></div>]]></content><author><name></name></author><category term="python"/><category term="paraview"/><category term="python"/><category term="paraview"/><category term="batch"/><summary type="html"><![CDATA[I just tested a super useful feature of Paraview. In a nutshell, I have been using paraview in the context of the research project Woodseer, for 3d rendering Xrays and their annotations.]]></summary></entry><entry><title type="html">a post with code</title><link href="https://jeremyfix.github.io/blog/2015/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>https://jeremyfix.github.io/blog/2015/code</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>