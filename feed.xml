<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://jeremyfix.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jeremyfix.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-04T07:42:16+00:00</updated><id>https://jeremyfix.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Rethinking deep vision interpretability</title><link href="https://jeremyfix.github.io/blog/2025/interpretation/" rel="alternate" type="text/html" title="Rethinking deep vision interpretability"/><published>2025-08-28T10:00:00+00:00</published><updated>2025-08-28T10:00:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/interpretation</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/interpretation/"><![CDATA[<p>For his PhD award talk at Gretsi, Thomas Fel gave a talk on explainability of deep vision models. Among the various approaches, attribution methods (Grad CAM) produce saliency maps indicating which part of the input is used by the neural network to build up its response.</p> <p>However, these attribution methods are restricted to inform about the where and not the what. It does not tell you about the nature of the pattern the neural network has extracted. In this work, T. Fel developes techniques to extract concepts from deep neural networks. Concepts are extracted by non-negative matrix factorization techniques <a class="citation" href="#Gillis2024">(Gillis, 2024)</a>. A survey on concept based explainable AI can be found in <a class="citation" href="#Poeta2023">(Poeta et al., 2023)</a>. In deep neural networks, there is nothing like the grand mother cell, a cell that would alone encode a feature; At least, this is not always true. The concepts are encoded by distributed patterns of activations <a class="citation" href="#Elhage2022">(Elhage et al., 2022)</a>.</p> <p>In his talk, he also mentioned the <strong>Linear Representation Hypothesis</strong> where features could be encoded as directions in the latent space of neural networks. However, as he mentioned, in practice, this does not appear to be the case because of the steering problem : pushing a representation toward such vectors actually steers the output along one feature but at some point fails.</p> <p>In <a class="citation" href="#Fel2023holistic">(Fel et al., 2023)</a>, he introduces a unifying framework of concept extraction techniques (e.g. K-means, PCA, or NMF): they basically all fall into the category of dictionary learning.</p> <p>The <a href="https://serre-lab.github.io/Lens/">Lens</a> project provides illustrations of visual concepts extracted from a large vision model trained on ImageNet. A cup of coffee hence appears to activate the concepts of latte art, handle, and black coffee. It helps also explaining failure cases. One example he showed was the “Man on the moon” picture that a neural network could classify as a shovel. Using visual concepts, it could be identified that this picture excites the concepts of trouser and rubble, that you actually see on the picture. However, in ImageNet, these two concepts are often strongly correlated with people using a shovel for snow.</p> <p>Finally, I would like to mention the explainability toolbox <a href="https://github.com/deel-ai/xplique">Xplique</a> which implements several explainability methods, in particular concept based approaches previously mentioned.</p>]]></content><author><name></name></author><category term="explanability"/><category term="explainability"/><category term="deep"/><category term="vision"/><category term="concept"/><summary type="html"><![CDATA[Explainability with attribution is limited to indicate the where. Concept extraction allows to capture the what.]]></summary></entry><entry><title type="html">Atomic auto-encoders for learning sparse representations</title><link href="https://jeremyfix.github.io/blog/2025/aaae/" rel="alternate" type="text/html" title="Atomic auto-encoders for learning sparse representations"/><published>2025-08-26T10:15:00+00:00</published><updated>2025-08-26T10:15:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/aaae</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/aaae/"><![CDATA[<p>At the <a href="https://gretsi.fr/colloque2025/">Gretsi 2025</a>, one session was about inverse problems. An example inverse problem involves find a high-dimensional signal \(x\) from low dimensional observations \(y\) under a linear model \(y = A x +z\) where \(z\) is a measurement noise, \(A\) the sensing matrix.</p> <p>One approach involves compressed sensing where you try to decompose your signal as the combination of the smallest number of dictionnary elements. In this family of approachs, <a class="citation" href="#Newson2023">(Newson &amp; Traonmilin, 2023)</a> proposed latent auto-encoders.</p>]]></content><author><name></name></author><category term="optimization"/><category term="sparse"/><category term="representation"/><category term="atomic"/><category term="autoencoder"/><summary type="html"><![CDATA[Using a specific type of auto-encoders to learn a sparse representation of your data]]></summary></entry><entry><title type="html">Regularized gradient descent</title><link href="https://jeremyfix.github.io/blog/2025/rgd/" rel="alternate" type="text/html" title="Regularized gradient descent"/><published>2025-08-26T10:00:00+00:00</published><updated>2025-08-26T10:00:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/rgd</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/rgd/"><![CDATA[<p>I have been attending a talk discussing inverse problems optimization using plug-and-play algorithms. During the talk, the speaker made a quick and clear path from regularized gradient descent to plug-and-play approaches.</p> <p>Here it is. When you want to constrain your optimization problem to find solutions, you can classically add a penalty term, or so-called regularization term to the loss function.</p> <p>For example, consider a regularized least square with a radial basis function representation of your input. In the expression below, we denote by $y$ the vector of all the outputs to be predicted, $w$ the amplitudes of the gaussians of the RBF. We do not specify it further but, to fix the ideas, $\Phi$ would be the function whose output components contain the evaluation of the individual RBF functions evaluated on the data points $x$.</p> \[min_w \|y - w^T \Phi(x)\|^2 + \lambda \|w\|_1\] <p>This is of the general form \(f(x) + g(x)\) where \(g\) contains our regularization term. Here, the regularization is the L1 norm which promotes sparsity. With classical gradient descent, you compute the gradient of this compound cost and iterate with whichever algorithm you like (stochastic gradient descent, adam, etc…).</p> <p>A step further, you could iterate one step of minimizing the likelihood (minimizing the MSE can be seen as maximizing the likelihood of the data under the hypothesis of a normal distribution whose mean is given by our linear model) and one step of minimizing the constraint. Proximal gradient descent is a step further as it allows to consider \(g(x)\) that are not differentiable.</p> <p>Proximal gradient descent <a class="citation" href="#Combettes2010">(Combettes &amp; Pesquet, 2010; Parikh &amp; Boyd, 2014)</a> iteratively updates the estimate of the solution by :</p> \[x_{k+1} = \text{prox}_\alpha(x_k - \alpha \nabla f(x_k))\] <p>with</p> \[\text{prox}_\alpha(z) = \text{argmin}_y (\frac{1}{2\alpha}\|y - z\|^2 + g(y))\] <p>The operator \(\text{prox}\) is called the proximity operator.</p> <p>The proximal operator requires a minimization. In the plug-and-play <a class="citation" href="#Venkatakrishnan2013">(Venkatakrishnan et al., 2013)</a> approach, you replace that minimization by a denoising step. This denoising step can be implemented with a denoising neural network.</p> <p>In his works, <a href="https://samuelhurault.netlify.app/">Samuel Hurault</a> (who is recipients of a best PhD award), was interested (among other things I believe), to recover convergence guarantees on the the plug-and-play algorithms that are lost if you blindly implement the regularization with a denoising network.</p>]]></content><author><name></name></author><category term="optimization"/><category term="plug-and-play"/><category term="proximal"/><summary type="html"><![CDATA[Plug-and-play algorithms]]></summary></entry><entry><title type="html">Job token permissions to access registries</title><link href="https://jeremyfix.github.io/blog/2025/jobtoken/" rel="alternate" type="text/html" title="Job token permissions to access registries"/><published>2025-08-26T10:00:00+00:00</published><updated>2025-08-26T10:00:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/jobtoken</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/jobtoken/"><![CDATA[<p>We have a setup where a private gitlab repository is hosting a docker image in its container registry. This image is used with several repositories to build up documents, web pages, etc..</p> <p>Unfortunately, sometimes, we have the issue that the job running on the secondary repositories fail with some errors like :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING: Failed to pull image with policy "if-not-present": Error response from
daemon: pull access denied for ...
</code></pre></div></div> <p>Actually this turns out to be a permission issue that must can be fixed on the gitlab repository hosting the image. This can be configured in the “Settings / CI-CD / Job Token permissions” menu. There, you can define an allowlist of foreign repositories that can access the registry.</p>]]></content><author><name></name></author><category term="gitlab"/><category term="cicd"/><category term="registry"/><category term="pull"/><category term="plug-and-play"/><category term="proximal"/><summary type="html"><![CDATA[How to allow a gitlab repository to access the container registry of another, private, repository]]></summary></entry><entry><title type="html">Test</title><link href="https://jeremyfix.github.io/blog/2025/test/" rel="alternate" type="text/html" title="Test"/><published>2025-08-25T18:00:00+00:00</published><updated>2025-08-25T18:00:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/test</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/test/"><![CDATA[<p>Just a dummy post to test the workflow. My posts do not seem to be updated anymore.</p>]]></content><author><name></name></author><category term="test"/><category term="test"/><summary type="html"><![CDATA[Simple test]]></summary></entry><entry><title type="html">Changing surrounding delimiters in VIM</title><link href="https://jeremyfix.github.io/blog/2025/vimdelimiter/" rel="alternate" type="text/html" title="Changing surrounding delimiters in VIM"/><published>2025-03-24T12:41:00+00:00</published><updated>2025-03-24T12:41:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/vimdelimiter</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/vimdelimiter/"><![CDATA[<p>Vim is magic. I had tu change the surrounding delimiters of strings.</p> <p>Basically, I had text like below and wanted to replace the backquote delimiter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| 0x10 | LDAi | 2 | Charge la valeur de l'opérande dans le registre A `[A := operande]` |
| 0x14 | LDAd | 2 | Charge la valeur dans la RAM pointée par l'opérande dans le registre A. `[A := Mem[opérande]]` |
| 0x18 | - | - | - |
| 0x1c | STA | 2 | Sauvegarde en mémoire la valeur du registre A à l'adresse donnée par l'opérande. `[Mem[opérande] := A]` |
| 0x20 | LDBi | 2 | Charge la valeur de l'opérande dans le registre B `[B := operande]` |
| 0x24 | LDBd | 2 | Charge la valeur dans la RAM pointée par l'opérande dans le registre B. `[B := Mem[opérande]]` |
</code></pre></div></div> <p>Every string like <code class="language-plaintext highlighter-rouge">\</code>[A := operande]`<code class="language-plaintext highlighter-rouge">was to be replaced by</code>{++[A := operande]++}`.</p> <p>To do so with, it is as easy as 1) visually selecting the lines where you want a modification (Ctrl + V), and 2) press “:” followed by the magic recipe</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s/`\(.*\)`/{++\1++}/g
</code></pre></div></div> <p>which stands for :</p> <ul> <li>s …. g : substitue globally in the grammar s/src_pattern/dst_pattern/g</li> <li>the source pattern is a repetition of which ever character <code class="language-plaintext highlighter-rouge">.* </code> we capture in a group by the surrounding ( and ); This source pattern is surrounded by the source delimiter, hence the backquotes</li> <li>the target pattern is the new delimiters surrounding the group copy/pasted with the \1</li> </ul>]]></content><author><name></name></author><category term="vim"/><category term="vim"/><category term="sed"/><category term="substitute"/><summary type="html"><![CDATA[Vim is magic. I had tu change the surrounding delimiters of strings.]]></summary></entry><entry><title type="html">One liners</title><link href="https://jeremyfix.github.io/blog/2025/oneliner/" rel="alternate" type="text/html" title="One liners"/><published>2025-01-08T20:57:00+00:00</published><updated>2025-01-08T20:57:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/oneliner</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/oneliner/"><![CDATA[<p>Today, I was running several simulations with <a href="https://github.com/torchcvnn/examples/tree/main/nir_cinejense">torchcvnn</a>, each of them saving their results a <code class="language-plaintext highlighter-rouge">metrics.csv</code> file within a specific directory. Each <code class="language-plaintext highlighter-rouge">metrics.csv</code> file was like :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>16,33.1491584777832,33.149155968594066,0.8940797582559719
</code></pre></div></div> <p>with an index followed by the metrics.</p> <p>The question was : how to easily compute the mean and standard deviation of the metrics by accumulating the measures from all the simulations.</p> <p>First, we can locate all the metrics file and build a list of these filenames</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s2">"metrics.csv"</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>  <span class="s2">" "</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">tr</code> command allows to remove the “new line”, in order to have a sequence of filepaths on a single line.</p> <p>And then, serialize a second command, this time using awk based. The computation of the standard deviation is the difference between the mean of the squared valued and the squared mean value.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>f <span class="k">in</span> <span class="si">$(</span>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s2">"metrics.csv"</span> | <span class="nb">tr</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>  <span class="s2">" "</span><span class="si">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">cat</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span><span class="p">;</span> <span class="nb">printf</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s1">','</span> <span class="s1">'{s+=$3; ss+=$3^2} END{print m=s/NR, sqrt(ss/NR-m^2)}'</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="bash"/><category term="bash"/><category term="awk"/><category term="find"/><summary type="html"><![CDATA[One liner beauty for aggregating files and computing statistics]]></summary></entry><entry><title type="html">Python and Paraview for batch processing</title><link href="https://jeremyfix.github.io/blog/2025/scriptingParaview/" rel="alternate" type="text/html" title="Python and Paraview for batch processing"/><published>2025-01-08T20:57:00+00:00</published><updated>2025-01-08T20:57:00+00:00</updated><id>https://jeremyfix.github.io/blog/2025/scriptingParaview</id><content type="html" xml:base="https://jeremyfix.github.io/blog/2025/scriptingParaview/"><![CDATA[<p>I just tested a super useful feature of <a href="https://github.com/Kitware/ParaView">Paraview</a>. In a nutshell, I have been using paraview in the context of the research project Woodseer, for 3d rendering Xrays and their annotations.</p> <p>Unfortunately, I had to generate illustrations from a batch of data and doing so from the GUI is not easy.</p> <p>Fortunaly, Paraview allows to record all the operations performed on the GUI and export all of these operations as a python script. The script is hardcoding the data filenames to be processed but it is only about changing few lines at the beginning of the script and you have a script able to batch process a collection of data.</p> <p>To record your interactions with Paraview, just clicking <code class="language-plaintext highlighter-rouge">Tools / Start trace</code>. Then you proceed with paraviex, adding your data, manipulating the 3d display, view point, colors, etc… Once done, just click on <code class="language-plaintext highlighter-rouge">Tools/Stop trace</code> and paraview will give you the equivalent python script for doing exactly the same operations. As a bonus, at the end of the script, we are provided sample codes for either displaying the output or even producing a screenshot.</p> <p>To run the script from your console, we need to use the <code class="language-plaintext highlighter-rouge">pvpython</code> interpreter which I believe contains its virtual environment for accessing the paraview python library.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pvpython paraplot_bil.py /opt/Datasets/Woodseer/Slicing/Sapin/4396
</code></pre></div></div> <p>And there you are :</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bil_4396-480.webp 480w,/assets/img/bil_4396-800.webp 800w,/assets/img/bil_4396-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/bil_4396.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Example rendering using paraview python scripting" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The python script that has been produced by the paraview export is given below :</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># trace generated using paraview version 5.13.0
# import paraview
# paraview.compatibility.major = 5
# paraview.compatibility.minor = 13
</span>
<span class="c1">#### import the simple module from the paraview
</span><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">pathlib</span>
<span class="kn">from</span> <span class="n">paraview.simple</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#### disable automatic camera reset on 'Show'
</span><span class="n">paraview</span><span class="p">.</span><span class="n">simple</span><span class="p">.</span><span class="nf">_DisableFirstRenderCameraReset</span><span class="p">()</span>

<span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Usage: python paraplot_compare.py &lt;xraydirw&gt;</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">xray_dir</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">treenumber</span> <span class="o">=</span> <span class="n">pathlib</span><span class="p">.</span><span class="nc">Path</span><span class="p">(</span><span class="n">xray_dir</span><span class="p">).</span><span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># get active view
</span><span class="n">renderView1</span> <span class="o">=</span> <span class="nc">GetActiveViewOrCreate</span><span class="p">(</span><span class="sh">"</span><span class="s">RenderView</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Properties modified on renderView1
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">UseColorPaletteForBackground</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># get the material library
</span><span class="n">materialLibrary1</span> <span class="o">=</span> <span class="nc">GetMaterialLibrary</span><span class="p">()</span>

<span class="c1"># Properties modified on renderView1
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">Background</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>

<span class="c1"># Hide orientation axes
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">OrientationAxesVisibility</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># create a new 'NetCDF Reader'
</span><span class="n">xraync</span> <span class="o">=</span> <span class="nc">NetCDFReader</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">xray.nc</span><span class="sh">"</span><span class="p">,</span> <span class="n">FileName</span><span class="o">=</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">xray_dir</span><span class="si">}</span><span class="s">/xray.nc</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># show data in view
</span><span class="n">xrayncDisplay</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">xraync</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">UniformGridRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">xrayncDisplay</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Outline</span><span class="sh">"</span>

<span class="c1"># reset view to fit data
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">ResetCamera</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># hide data in view
</span><span class="nc">Hide</span><span class="p">(</span><span class="n">xraync</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># create a new 'Contour'
</span><span class="n">contour1</span> <span class="o">=</span> <span class="nc">Contour</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">Contour1</span><span class="sh">"</span><span class="p">,</span> <span class="n">Input</span><span class="o">=</span><span class="n">xraync</span><span class="p">)</span>


<span class="c1"># show data in view
</span><span class="n">contour1Display</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">contour1</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">GeometryRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">contour1Display</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Surface</span><span class="sh">"</span>

<span class="c1"># reset view to fit data
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">ResetCamera</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">)</span>
<span class="n">contour1</span><span class="p">.</span><span class="n">Isosurfaces</span> <span class="o">=</span> <span class="p">[</span><span class="mf">950.0</span><span class="p">]</span>

<span class="c1"># show color bar/color legend
</span><span class="n">contour1Display</span><span class="p">.</span><span class="nc">SetScalarBarVisibility</span><span class="p">(</span><span class="n">renderView1</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># get color transfer function/color map for 'data'
</span><span class="n">dataLUT</span> <span class="o">=</span> <span class="nc">GetColorTransferFunction</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># get opacity transfer function/opacity map for 'data'
</span><span class="n">dataPWF</span> <span class="o">=</span> <span class="nc">GetOpacityTransferFunction</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># get 2D transfer function for 'data'
</span><span class="n">dataTF2D</span> <span class="o">=</span> <span class="nc">GetTransferFunction2D</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># turn off scalar coloring
</span><span class="nc">ColorBy</span><span class="p">(</span><span class="n">contour1Display</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># Hide the scalar bar for this color map if no visible data is colored by it.
</span><span class="nc">HideScalarBarIfNotNeeded</span><span class="p">(</span><span class="n">dataLUT</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># create a new 'NetCDF Reader'
</span><span class="n">bilnc</span> <span class="o">=</span> <span class="nc">NetCDFReader</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">bil.nc</span><span class="sh">"</span><span class="p">,</span> <span class="n">FileName</span><span class="o">=</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">xray_dir</span><span class="si">}</span><span class="s">/bil.nc</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># show data in view
</span><span class="n">bilncDisplay</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">bilnc</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">UniformGridRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">bilncDisplay</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Outline</span><span class="sh">"</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># create a new 'Transform'
</span><span class="n">transform1</span> <span class="o">=</span> <span class="nc">Transform</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">Transform1</span><span class="sh">"</span><span class="p">,</span> <span class="n">Input</span><span class="o">=</span><span class="n">bilnc</span><span class="p">)</span>

<span class="c1"># Properties modified on transform1.Transform
</span><span class="n">transform1</span><span class="p">.</span><span class="n">Transform</span><span class="p">.</span><span class="n">Translate</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mf">400.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">]</span>

<span class="c1"># show data in view
</span><span class="n">transform1Display</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">transform1</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">StructuredGridRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">transform1Display</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Outline</span><span class="sh">"</span>

<span class="c1"># hide data in view
</span><span class="nc">Hide</span><span class="p">(</span><span class="n">bilnc</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># create a new 'Contour'
</span><span class="n">contour2</span> <span class="o">=</span> <span class="nc">Contour</span><span class="p">(</span><span class="n">registrationName</span><span class="o">=</span><span class="sh">"</span><span class="s">Contour2</span><span class="sh">"</span><span class="p">,</span> <span class="n">Input</span><span class="o">=</span><span class="n">transform1</span><span class="p">)</span>

<span class="c1"># show data in view
</span><span class="n">contour2Display</span> <span class="o">=</span> <span class="nc">Show</span><span class="p">(</span><span class="n">contour2</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">,</span> <span class="sh">"</span><span class="s">GeometryRepresentation</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># trace defaults for the display properties.
</span><span class="n">contour2Display</span><span class="p">.</span><span class="n">Representation</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Surface</span><span class="sh">"</span>

<span class="c1"># show color bar/color legend
</span><span class="n">contour2Display</span><span class="p">.</span><span class="nc">SetScalarBarVisibility</span><span class="p">(</span><span class="n">renderView1</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1"># update the view to ensure updated data information
</span><span class="n">renderView1</span><span class="p">.</span><span class="nc">Update</span><span class="p">()</span>

<span class="c1"># hide data in view
</span><span class="nc">Hide</span><span class="p">(</span><span class="n">transform1</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># turn off scalar coloring
</span><span class="nc">ColorBy</span><span class="p">(</span><span class="n">contour2Display</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># Hide the scalar bar for this color map if no visible data is colored by it.
</span><span class="nc">HideScalarBarIfNotNeeded</span><span class="p">(</span><span class="n">dataLUT</span><span class="p">,</span> <span class="n">renderView1</span><span class="p">)</span>

<span class="c1"># ================================================================
# addendum: following script captures some of the application
# state to faithfully reproduce the visualization during playback
# ================================================================
</span>
<span class="c1"># get layout
</span><span class="n">layout1</span> <span class="o">=</span> <span class="nc">GetLayout</span><span class="p">()</span>

<span class="c1"># --------------------------------
# saving layout sizes for layouts
</span>
<span class="c1"># layout/tab size in pixels
</span><span class="n">layout1</span><span class="p">.</span><span class="nc">SetSize</span><span class="p">(</span><span class="mi">695</span><span class="p">,</span> <span class="mi">909</span><span class="p">)</span>

<span class="c1"># -----------------------------------
# saving camera placements for views
</span>
<span class="c1"># current camera placement for renderView1
</span><span class="n">renderView1</span><span class="p">.</span><span class="n">CameraPosition</span> <span class="o">=</span> <span class="p">[</span><span class="mf">176.54338928363353</span><span class="p">,</span> <span class="o">-</span><span class="mf">2235.517103337426</span><span class="p">,</span> <span class="mf">854.599164978424</span><span class="p">]</span>
<span class="n">renderView1</span><span class="p">.</span><span class="n">CameraFocalPoint</span> <span class="o">=</span> <span class="p">[</span><span class="mf">38.13334555795167</span><span class="p">,</span> <span class="mf">112.86198528178713</span><span class="p">,</span> <span class="mf">548.253544940588</span><span class="p">]</span>
<span class="n">renderView1</span><span class="p">.</span><span class="n">CameraViewUp</span> <span class="o">=</span> <span class="p">[</span>
    <span class="o">-</span><span class="mf">0.017260080149817204</span><span class="p">,</span>
    <span class="mf">0.12833424422633485</span><span class="p">,</span>
    <span class="mf">0.991580763928021</span><span class="p">,</span>
<span class="p">]</span>
<span class="n">renderView1</span><span class="p">.</span><span class="n">CameraParallelScale</span> <span class="o">=</span> <span class="mf">753.4992643086075</span>


<span class="c1">##--------------------------------------------
## You may need to add some code at the end of this python script depending on your usage, eg:
#
## Render all views to see them appears
# RenderAllViews()
#
## Interact with the view, usefull when running from pvpython
# Interact()
#
## Save a screenshot of the active view
</span><span class="nc">SaveScreenshot</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">/tmp/comparison/</span><span class="si">{</span><span class="n">treenumber</span><span class="si">}</span><span class="s">.png</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># SaveScreenshot("path/to/screenshot.png")
#
## Save a screenshot of a layout (multiple splitted view)
# SaveScreenshot("path/to/screenshot.png", GetLayout())
#
## Save all "Extractors" from the pipeline browser
# SaveExtracts()
#
## Save a animation of the current active view
# SaveAnimation()
#
## Please refer to the documentation of paraview.simple
## https://www.paraview.org/paraview-docs/latest/python/paraview.simple.html
##--------------------------------------------
</span></code></pre></div></div>]]></content><author><name></name></author><category term="python"/><category term="paraview"/><category term="python"/><category term="paraview"/><category term="batch"/><summary type="html"><![CDATA[I just tested a super useful feature of Paraview. In a nutshell, I have been using paraview in the context of the research project Woodseer, for 3d rendering Xrays and their annotations.]]></summary></entry></feed>